---
version: "3"

x-preconditions: &preconditions
  - &has-app
    sh: kubectl get deploy,sts -A | grep '/{{.APP}} ' | awk '{print $1}' | grep .
    msg: "App '{{.APP}}' not found"
  - &has-cronjob
    sh: kubectl get cronjob -n {{.NAMESPACE}} {{.APP}}-snapshot
    msg: "CronJob '{{.APP}}-snapshot' in namespace '{{.NAMESPACE}}' not found"
  - &has-volume
    sh: kubectl get pvc -n {{.NAMESPACE}} {{.VOLUME}}
    msg: "PersistentVolumeClaim '{{.VOLUME}}' in namespace '{{.NAMESPACE}}' not found"
  - &has-restore-job
    msg: "File '{{.PROJECT_DIR}}/hack/restore-job.yaml' not found"
    sh: "test -f {{.PROJECT_DIR}}/hack/restore-job.yaml"

x-vars: &vars
  NAMESPACE:
    sh: kubectl get deploy,sts -A | grep '/{{.APP}} ' | awk '{print $1}'
  NAME:
    sh: kubectl get deploy,sts -n {{.NAMESPACE}} | grep '/{{.APP}} ' | awk '{print $1}'
  VOLUME:
    sh: kubectl get pvc -n {{.NAMESPACE}} --no-headers -l "app.kubernetes.io/name={{.APP}}" | awk '{print $1}'
  SNAPSHOT: '{{.SNAPSHOT | default "latest"}}'
  TS: '{{now | date "20060102150405"}}'

tasks:
  list:
    desc: List all existing snapshots for an app (task snapshot:list APP=plex [KOPIA_NAMESPACE=<namespace>])
    cmds:
      - kubectl -n {{.KOPIA_NAMESPACE | default "kopia"}} exec -it deployment/kopia -- kopia snapshot list /data/{{.NAMESPACE}}/{{.APP}} {{.CLI_ARGS}}
    vars: *vars
    preconditions:
      - sh: kubectl -n {{.KOPIA_NAMESPACE | default "kopia"}} get deployment kopia
        msg: |
          deployment/kopia in namespace/{{.KOPIA_NAMESPACE | default "kopia"}} not found

  create:
    desc: Create a job to backup an app (ex. task PVC=plex-config-v1 backup:volume)
    interactive: true
    cmds:
      - |
        kubectl -n {{.NAMESPACE}} create job --from=cronjob/{{.APP}}-{{.PVC}}-snapshot {{.APP}}-snapshot-{{.TS}} --dry-run=client --output yaml \
          | yq eval "del(.spec.template.spec.initContainers)" - \
          | kubectl apply -f -
      - sleep 2
      - kubectl -n {{.NAMESPACE}} wait pod --for condition=ready --selector=job-name={{.APP}}-snapshot-{{.TS}} --timeout=1m
      - kubectl -n {{.NAMESPACE}} logs --selector=job-name={{.APP}}-snapshot-{{.TS}} -f
      - kubectl -n {{.NAMESPACE}} delete job {{.APP}}-snapshot-{{.TS}}
    vars:
      NAMESPACE:
        sh: kubectl get pvc -A | grep {{.PVC}} | awk '{print $1}'
      APP:
        sh: kubectl -n {{.NAMESPACE}} get pvc {{.PVC}} -o jsonpath='{.metadata.labels.app\.kubernetes\.io\/name}'
      TS:
        sh: date "+%Y%m%d%H%M%S"
    preconditions:
      - sh: kubectl -n {{.NAMESPACE}} get cronjob {{.APP}}-{{.PVC}}-snapshot
        msg: "Error: cronjob/{{.APP}}-{{.PVC}}-snapshot in namespace/{{.NAMESPACE}} not found"
      - sh: kubectl -n {{.NAMESPACE}} get pvc {{.PVC}}
        msg: "Error: pvc/{{.PVC}} in namespace/{{.NAMESPACE}} not found"

  restore:
    desc: Create a job to restore a kopia snapshot (ex. task PVC=plex-config-v1 SNAPSHOT=latest restore:volume)
    interactive: true
    cmds:
      - flux -n {{.NAMESPACE}} suspend helmrelease {{.APP}}
      - kubectl -n {{.NAMESPACE}} scale deployment {{.APP}} --replicas 0
      - kubectl -n {{.NAMESPACE}} wait pod --for delete --selector="app.kubernetes.io/name={{.APP}}" --timeout=2m
      - . $HOME/Development/k8s-config/env.base && . $HOME/Development/k8s-config/env.main && envsubst < <(cat ./hack/restore-job.yaml) | kubectl apply -f -
      - kubectl -n {{.NAMESPACE}} wait job --for condition=complete {{.APP}}-{{.PVC}}-restore-snapshot --timeout=60m
      - flux -n {{.NAMESPACE}} resume helmrelease {{.APP}}
      - kubectl -n {{.NAMESPACE}} logs job/{{.APP}}-{{.PVC}}-restore-snapshot
      - kubectl -n {{.NAMESPACE}} delete job {{.APP}}-{{.PVC}}-restore-snapshot
      - kubectl -n {{.NAMESPACE}} delete pvc {{.APP}}-restore-pvc
      - kubectl -n {{.NAMESPACE}} delete pv {{.APP}}-restore-pv
    vars:
      NAMESPACE:
        sh: kubectl get pvc -A | grep {{.PVC}} | awk '{print $1}'
      APP:
        sh: kubectl -n {{.NAMESPACE}} get pvc {{.PVC}} -o jsonpath='{.metadata.labels.app\.kubernetes\.io\/name}'
    env:
      PVC: "{{.PVC}}"
      NAMESPACE:
        sh: kubectl get pvc -A | grep {{.PVC}} | awk '{print $1}'
      APP:
        sh: kubectl -n {{.NAMESPACE}} get pvc {{.PVC}} -o jsonpath='{.metadata.labels.app\.kubernetes\.io\/name}'
      SNAPSHOT:
        sh: |
          if [[ {{.SNAPSHOT}} == "latest" ]]; then
            kubectl exec deployment/kopia -n {{.KOPIA_NAMESPACE | default "kopia"}} -- kopia snapshot list /data/{{.NAMESPACE}}/{{.APP}}/{{.PVC}} --json | jq --raw-output '.[-1] | .id'
          else
            echo {{.SNAPSHOT}}
          fi
    preconditions:
      - sh: kubectl -n {{.NAMESPACE}} get pvc {{.PVC}}
        msg: "Error: pvc/{{.PVC}} in namespace/{{.NAMESPACE}} not found"
